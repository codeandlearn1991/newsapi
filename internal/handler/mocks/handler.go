// Code generated by MockGen. DO NOT EDIT.
// Source: handler.go
//
// Generated by this command:
//
//	mockgen -source=handler.go -destination=mocks/handler.go -package=mockshandler
//

// Package mockshandler is a generated GoMock package.
package mockshandler

import (
	reflect "reflect"

	store "github.com/codeandlearn1991/newsapi/internal/store"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockNewsStorer is a mock of NewsStorer interface.
type MockNewsStorer struct {
	ctrl     *gomock.Controller
	recorder *MockNewsStorerMockRecorder
	isgomock struct{}
}

// MockNewsStorerMockRecorder is the mock recorder for MockNewsStorer.
type MockNewsStorerMockRecorder struct {
	mock *MockNewsStorer
}

// NewMockNewsStorer creates a new mock instance.
func NewMockNewsStorer(ctrl *gomock.Controller) *MockNewsStorer {
	mock := &MockNewsStorer{ctrl: ctrl}
	mock.recorder = &MockNewsStorerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNewsStorer) EXPECT() *MockNewsStorerMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockNewsStorer) Create(arg0 *store.News) (*store.News, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(*store.News)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockNewsStorerMockRecorder) Create(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockNewsStorer)(nil).Create), arg0)
}

// DeleteByID mocks base method.
func (m *MockNewsStorer) DeleteByID(arg0 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByID", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByID indicates an expected call of DeleteByID.
func (mr *MockNewsStorerMockRecorder) DeleteByID(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByID", reflect.TypeOf((*MockNewsStorer)(nil).DeleteByID), arg0)
}

// FindAll mocks base method.
func (m *MockNewsStorer) FindAll() ([]*store.News, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll")
	ret0, _ := ret[0].([]*store.News)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockNewsStorerMockRecorder) FindAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockNewsStorer)(nil).FindAll))
}

// FindByID mocks base method.
func (m *MockNewsStorer) FindByID(arg0 uuid.UUID) (*store.News, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", arg0)
	ret0, _ := ret[0].(*store.News)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockNewsStorerMockRecorder) FindByID(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockNewsStorer)(nil).FindByID), arg0)
}

// UpdateByID mocks base method.
func (m *MockNewsStorer) UpdateByID(arg0 *store.News) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateByID", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateByID indicates an expected call of UpdateByID.
func (mr *MockNewsStorerMockRecorder) UpdateByID(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateByID", reflect.TypeOf((*MockNewsStorer)(nil).UpdateByID), arg0)
}
